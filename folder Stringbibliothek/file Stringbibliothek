#include <stdio.h> 
#include <string.h> 
  
char *strcpy(char dest[], const char src[]);  //String Kopieren
int strcmp(const char str1[], const char str2[]);  //Vergleich zweier Strings 
char *strcat(char dest[], const char src[]); // String an einen anderen String hängen 
char *strncat1(char dest[], const char src[], int n); // Teilstring zusammenfügen
char *strchr(const char str[], int c); // sucht für das erste aufkommen des chars C
char *strstr1(const char s1[],const char s2[]); // vergleicht strings 

int main()

{

    char src[1000], dest[1000];
    char str1[1000], str2[1000];
    char str[100] = "This is a string for the strchar function";
    char s1[100] = "This is a test string for the strstr function";
    char *ret;
    int n;
    char *p;

printf("~~~~~~~~~~~\ncopy string\n");
printf("Enter string to copy: \n");
gets(src);

strcpy(dest, src);
printf("copied string: %s\n", dest);


////////////////

printf("~~~~~~~~~~~\ncompair strings \n");
printf("Enter first string to be compaired: \n");
gets(str1);

printf("please enter second string to compair:\n");
gets(str2);

if(strcmp(str1, str2) == 0)
{
    printf("Strings are equal. \n");
}
if(strcmp(str1, str2) !=0)
{
    printf("Strings are not equal. \n"); 
}


////////////////

printf("~~~~~~~~~~~\nmerge two strings");
printf("Enter strings to merge: \n");
gets(dest);

printf("\nEnter second string to merge: \n");
gets(src);

strcat(dest, src); 
printf("\nMerged strings: %s \n", dest);

////////////////

printf("~~~~~~~~~~~\nmerge substrings\n");
printf("Enter substrings to merge: \n");
gets(dest);

printf("Enter second string: \n");
gets(src);

printf("Count of characters of the substring: \n");
scanf("%d", &n);

strncat1(dest, src, n);
printf("The merged string is: %s \n", dest);

////////////////

printf("~~~~~~~~~~~\nFind the letters and display remaining string\n");

ret = strchr(str, 'a');

printf("String is starting from the searched letter'd': %s \n", ret);
    

////////////////

  printf("~~~~~~~~~~~\nFind the Substring and display the remaining string \n");
    p = strstr1(s1, "is");

    if (p)
    {
        printf("'is' is part of the string:\n%s", p);
    }
    else
    {
        printf("String not found\n");
    }
return 0;

}


char *strcpy(char dest[], const char src[]) // copy string
{
    int i = 0;

    while (src[i] != '\0')
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
    return dest;
}


int strcmp(const char str1[], const char str2[]) // compair string 
{
    int i = 0;

    while (str1[i] == str2[i])
    {
        if (str1[i] == '\0' || str2[i] == '\0')
            break;
        i++;
    }

    if (str1[i] == '\0' && str2[i] == '\0')
        return 0;
    else
        return 1;
}

char *strcat(char dest[], const char src[]) //merge string
{
    int i = 0;
    int j = 0;

    while (dest[i] != '\0')
    {
        i++;
    }
    while (src[j] != '\0')
    {
        dest[i] = src[j];
        i++;
        j++;
    }

    dest[i] = '\0';

    return dest;
}


char *strncat1(char dest[], const char src[], int n) //merge substring
{
    int i = 0;
    int j = 0;

    while (dest[i] != '\0')
    {
        i++;
    }
    while (j < n && src[j] != '\0')
    {
        dest[i] = src[j];
        i++;
        j++;
    }

    dest[i] = '\0';

    return dest;
}


char *strchr(const char str[], int c) // find letters and display remaining string 
{
    if (str == 0)
    {
        return NULL;
    }

    while (*str != 0)
    {
        if (*str == (char)c)
        {
            return str;
        }
        str++;
    }

    return NULL;
}


char *strstr1(const char *s1, const char *s2) // find substrings and display remaining string 

{
    const char *p1;
    const char *p2;

    p2 = s2;

    if (*p2 == 0)
    {
        return NULL;
    }

    while (*s1 != 0)
    {
        s1++;

        p1 = s1;
        while (1)
        {
            if (*p2 == 0)
            {
                return (char *)s1;
            }
            if (*p1++ != *p2++)
            {
                break;
            }
        }
        p2 = s2;
    }

    return NULL;
}




